{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['image.cmap'] = 'gray'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n",
      "/home/facundo/.python/lib/python3.6/importlib/_bootstrap.py:205: RuntimeWarning: compiletime version 3.5 of module 'tensorflow.python.framework.fast_tensor_util' does not match runtime version 3.6\n",
      "  return f(*args, **kwds)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: (60000, 28, 28, 1)\n",
      "60000 train samples\n",
      "10000 test samples\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import keras\n",
    "from torchsummary import summary\n",
    "import os\n",
    "import datasets\n",
    "import pytorch_models,pytorch_experiment\n",
    "import torch.optim as optim\n",
    "import torch\n",
    "use_cuda=torch.cuda.is_available()\n",
    "\n",
    "dataset=\"mnist\"\n",
    "(x_train, y_train), (x_test, y_test), input_shape,num_classes = datasets.get_data(dataset)\n",
    "\n",
    "\n",
    "print('x_train shape:', x_train.shape)\n",
    "print(x_train.shape[0], 'train samples')\n",
    "print(x_test.shape[0], 'test samples')\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AllGConv(\n",
      "  (conv): Sequential(\n",
      "    (0): P4MConvZ2()\n",
      "    (1): ReLU()\n",
      "    (2): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (3): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (4): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (5): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (6): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (7): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (8): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (class_conv): Conv2d(48, 10, kernel_size=(1, 1), stride=(1, 1))\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model = pytorch_models.AllGConv(input_shape,num_classes,filters=96//4)\n",
    "\n",
    "parameters=pytorch_experiment.add_weight_decay(model.named_parameters(),1e-9)\n",
    "optimizer = optim.Adam(parameters, lr=0.001)\n",
    "\n",
    "if use_cuda:\n",
    "    model=model.cuda()\n",
    "print(model)\n",
    "#summary(model, input_size=[1,28,28])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AllGConv(\n",
      "  (conv): Sequential(\n",
      "    (0): P4MConvZ2()\n",
      "    (1): ReLU()\n",
      "    (2): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (3): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (4): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (5): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (6): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (7): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "    (8): ConvBNAct(\n",
      "      (model): Sequential(\n",
      "        (0): P4MConvP4M()\n",
      "        (1): ReLU()\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (class_conv): Conv2d(48, 10, kernel_size=(1, 1), stride=(1, 1))\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "\n",
    "rotated_model=pytorch_models.AllGConv(input_shape,num_classes,filters=96//4)\n",
    "if use_cuda:\n",
    "    rotated_model= rotated_model.cuda()\n",
    "\n",
    "\n",
    "rotated_parameters=pytorch_experiment.add_weight_decay(rotated_model.named_parameters(),1e-9)\n",
    "rotated_optimizer = optim.Adam(rotated_parameters, lr=0.001)\n",
    "\n",
    "print(rotated_model)\n",
    "#summary(model, input_size=[1,28,28])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training model with unrotated dataset...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1: 100% (batch 938/938)  ==stats==> loss:  0.468, accuracy:  0.843, Time:  0:00:59\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 0.1345, Accuracy: 96.09% (9609/10000)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 2: 100% (batch 938/938)  ==stats==> loss: 0.0944, accuracy:  0.971, Time:  0:01:17\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 0.0609, Accuracy: 97.98% (9798/10000)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 3: 100% (batch 938/938)  ==stats==> loss: 0.0671, accuracy:  0.979, Time:  0:01:17\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 0.0677, Accuracy: 98.12% (9812/10000)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 4: 100% (batch 938/938)  ==stats==> loss: 0.0511, accuracy:  0.984, Time:  0:01:05\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 0.0585, Accuracy: 98.14% (9814/10000)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 5: 100% (batch 938/938)  ==stats==> loss: 0.0441, accuracy:  0.986, Time:  0:01:18\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 0.0508, Accuracy: 98.37% (9837/10000)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fcd996ba278>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Not training model with rotated dataset\n",
      "Training rotated model with rotated dataset...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1: 100% (batch 938/938)  ==stats==> loss:    2.3, accuracy:  0.103, Time:  0:01:17\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 2.3025, Accuracy: 10.28% (1028/10000)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 2: 100% (batch 938/938)  ==stats==> loss:    2.3, accuracy:  0.104, Time:  0:01:16\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 2.3026, Accuracy: 10.28% (1028/10000)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 3: 100% (batch 938/938)  ==stats==> loss:    2.3, accuracy:  0.104, Time:  0:01:16\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 2.3026, Accuracy: 10.28% (1028/10000)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 4: 100% (batch 938/938)  ==stats==> loss:    2.3, accuracy:  0.104, Time:  0:01:14\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 2.3026, Accuracy: 10.28% (1028/10000)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 5: 100% (batch 938/938)  ==stats==> loss:    2.3, accuracy:  0.104, Time:  0:01:14\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test => Loss: 2.3026, Accuracy: 10.28% (1028/10000)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fccec5c59b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing both models on both datasets...\n",
      "Evaluating model_rotated_test_dataset:\n",
      "Evaluating model_rotated_train_dataset:\n",
      "Evaluating model_test_dataset:\n",
      "Evaluating model_train_dataset:\n",
      "Evaluating rotated_model_rotated_test_dataset:\n",
      "Evaluating rotated_model_rotated_train_dataset:\n",
      "Evaluating rotated_model_test_dataset:\n",
      "Evaluating rotated_model_train_dataset:\n",
      "model_rotated_test_dataset score: loss=1.481965, accuracy=0.651800\n",
      "model_rotated_train_dataset score: loss=1.538107, accuracy=0.646150\n",
      "model_test_dataset score: loss=0.050757, accuracy=0.983700\n",
      "model_train_dataset score: loss=0.032436, accuracy=0.989250\n",
      "rotated_model_rotated_test_dataset score: loss=2.302596, accuracy=0.102800\n",
      "rotated_model_rotated_train_dataset score: loss=2.302491, accuracy=0.104417\n",
      "rotated_model_test_dataset score: loss=2.302596, accuracy=0.102800\n",
      "rotated_model_train_dataset score: loss=2.302491, accuracy=0.104417\n"
     ]
    }
   ],
   "source": [
    "import pytorch_experiment\n",
    "batch_size = 64\n",
    "\n",
    "epochs={'cifar10':5,'mnist':5,'fashion_mnist':12,'cluttered_mnist':10,'lsa16':15,'mnist_rot':10,'pugeault':15}\n",
    "\n",
    "rotated_epochs={'cifar10':5,'mnist':5,'fashion_mnist':60,'cluttered_mnist':30,'lsa16':100,'mnist_rot':15,'pugeault':40}\n",
    "\n",
    "scores=pytorch_experiment.train_rotated(dataset,model,rotated_model,x_train,y_train,x_test,\n",
    "                          y_test,num_classes,input_shape,batch_size,epochs[dataset],rotated_epochs[dataset]\n",
    "                                        ,optimizer,rotated_optimizer,use_cuda,plot_accuracy=True)\n",
    "\n",
    "\n",
    "for k,v in scores.items():\n",
    "    print('%s score: loss=%f, accuracy=%f' % (k,v[0],v[1]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "output_file=\"results/gconv.txt\"\n",
    "f= open(output_file,\"a+\")\n",
    "general_message=\"%s\\nResults on dataset %s with model %s and rotated model %s\\n\" % (str(datetime.now()),dataset,model.name,rotated_model.name)\n",
    "f.write(general_message)\n",
    "print(general_message)\n",
    "for k,v in scores.items():\n",
    "    message='%s score: loss=%f, accuracy=%f\\n' % (k,v[0],v[1])\n",
    "    print(message)\n",
    "    f.write(message)\n",
    "f.write(\"\\n\\n\")    \n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
